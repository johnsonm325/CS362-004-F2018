        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 205 returned 100% blocks executed 100%
      205:    8:int compare(const void* a, const void* b) {
      205:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       27:   10:    return 1;
      178:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
       63:   12:    return -1;
      115:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 1 returned 100% blocks executed 100%
        1:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 20 returned 100% blocks executed 100%
       20:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       20:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       20:  209:  if (state->deckCount[player] < 1)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        9:  210:    return -1;
       11:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      127:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      105:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      105:  216:    newDeck[newDeckPos] = state->deck[player][card];
      105:  217:    newDeckPos++;
      363:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      258:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      105:  221:    state->deckCount[player]--;
        -:  222:  }
      116:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      105:  224:    state->deck[player][i] = newDeck[i];
      105:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       11:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235://printf("HandPos: %d\n", handPos);
        -:  236://printf("choice1: %d\n", choice1);
        -:  237://printf("choice2: %d\n", choice2);
        -:  238://printf("choice3: %d\n", choice3);
        -:  239:
        -:  240:  //check if it is the right phase
    #####:  241:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
    #####:  247:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  248:    {
    #####:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
    #####:  253:  card = handCard(handPos, state);
call    0 never executed
        -:  254://printf("card: %d\n", card);
        -:  255://printf("adventurer: %d\n", adventurer);
        -:  256://printf("treasure_map: %d\n", treasure_map);
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262://printf("here\n");
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268://printf("and here\n");
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  274:	
    #####:  275:  return 0;
        -:  276:}
        -:  277:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  319:}
        -:  320:
function handCard called 0 returned 0% blocks executed 0%
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  352:int whoseTurn(struct gameState *state) {
        8:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
function isGameOver called 12 returned 100% blocks executed 100%
       12:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:
        -:  400:  //if stack of Province cards is empty, the game ends
       12:  401:  if (state->supplyCount[province] == 0)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  402:    {
        1:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
       11:  407:  j = 0;
      286:  408:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  409:    {
      275:  410:      if (state->supplyCount[i] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  411:	{
       30:  412:	  j++;
        -:  413:	}
        -:  414:    }
       11:  415:  if ( j >= 3)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:  416:    {
       10:  417:      return 1;
        -:  418:    }
        -:  419:
        1:  420:  return 0;
        -:  421:}
        -:  422:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
function drawCard called 49 returned 100% blocks executed 100%
       49:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
       49:  534:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
       10:  539:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        5:  540:      state->deck[player][i] = state->discard[player][i];
        5:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
        5:  544:    state->deckCount[player] = state->discardCount[player];
        5:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
        5:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
        5:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
        5:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
        5:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
        5:  565:    if (deckCounter == 0)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  566:      return -1;
        -:  567:
        1:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  569:    state->deckCount[player]--;
        1:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
       44:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
       44:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
       44:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       44:  582:    state->deckCount[player]--;
       44:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
       45:  586:  return 0;
        -:  587:}
        -:  588:
function getCost called 28 returned 100% blocks executed 100%
       28:  589:int getCost(int cardNumber)
        -:  590:{
       28:  591:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  592:    {
        -:  593:    case curse:
        1:  594:      return 0;
        -:  595:    case estate:
        1:  596:      return 2;
        -:  597:    case duchy:
        1:  598:      return 5;
        -:  599:    case province:
        1:  600:      return 8;
        -:  601:    case copper:
        1:  602:      return 0;
        -:  603:    case silver:
        1:  604:      return 3;
        -:  605:    case gold:
        1:  606:      return 6;
        -:  607:    case adventurer:
        1:  608:      return 6;
        -:  609:    case council_room:
        1:  610:      return 5;
        -:  611:    case feast:
        1:  612:      return 4;
        -:  613:    case gardens:
        1:  614:      return 4;
        -:  615:    case mine:
        1:  616:      return 5;
        -:  617:    case remodel:
        1:  618:      return 4;
        -:  619:    case smithy:
        1:  620:      return 4;
        -:  621:    case village:
        1:  622:      return 3;
        -:  623:    case baron:
        1:  624:      return 4;
        -:  625:    case great_hall:
        1:  626:      return 3;
        -:  627:    case minion:
        1:  628:      return 5;
        -:  629:    case steward:
        1:  630:      return 3;
        -:  631:    case tribute:
        1:  632:      return 5;
        -:  633:    case ambassador:
        1:  634:      return 3;
        -:  635:    case cutpurse:
        1:  636:      return 4;
        -:  637:    case embargo: 
        1:  638:      return 2;
        -:  639:    case outpost:
        1:  640:      return 5;
        -:  641:    case salvager:
        1:  642:      return 4;
        -:  643:    case sea_hag:
        1:  644:      return 4;
        -:  645:    case treasure_map:
        1:  646:      return 4;
        -:  647:    }
        -:  648:	
        1:  649:  return -1;
        -:  650:}
        -:  651:
function smithyCard called 2 returned 100% blocks executed 100%
        2:  652:int smithyCard(int currPlayer, struct gameState *state, int handPos)
        -:  653:{
        -:  654:  //+3 Cards
       10:  655:  for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  656:    {
        8:  657:      drawCard(currPlayer, state);
call    0 returned 100%
        -:  658:    }
        -:  659:			
        -:  660:    //discard card from hand
        2:  661:    discardCard(handPos, currPlayer, state, 0);
call    0 returned 100%
        2:  662:    return 0;
        -:  663:}
        -:  664:
function adventurerCard called 2 returned 100% blocks executed 100%
        2:  665:int adventurerCard(int drawntreasure, struct gameState *state, int currentPlayer, int *temphand, int z, int cardDrawn)
        -:  666:{
        -:  667:
       18:  668:  while(drawntreasure<2){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       14:  669:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        5:  670:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  671:    }
       14:  672:    drawCard(currentPlayer, state);
call    0 returned 100%
       14:  673:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
       14:  674:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:  675:      drawntreasure++;
        -:  676:    else{
       10:  677:      temphand[z]=cardDrawn;
       10:  678:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       10:  679:      z++;
        -:  680:    }
        -:  681:  }
       14:  682:  while(z-1>=0){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  683:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       10:  684:    z=z-1;
        -:  685:  }
        2:  686:  return 0;
        -:  687:}
        -:  688:
function villageCard called 0 returned 0% blocks executed 0%
    #####:  689:int villageCard(int handPos, struct gameState *state, int currentPlayer)
        -:  690:{
        -:  691:  //+1 Card
    #####:  692:  drawCard(currentPlayer, state);
call    0 never executed
        -:  693:			
        -:  694:  //+2 Actions
    #####:  695:  state->numActions = state->numActions + 2;
        -:  696:			
        -:  697:  //discard played card from hand
    #####:  698:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  699:  return 0;
        -:  700:}
        -:  701:    
function stewardCard called 0 returned 0% blocks executed 0%
    #####:  702:int stewardCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -:  703:{
    #####:  704:  if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  705:  {
        -:  706:    //+2 cards
    #####:  707:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  708:    discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  709:  }
    #####:  710:  else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  711:  {
        -:  712:    //+2 coins
    #####:  713:    state->coins = state->coins + 2;
        -:  714:  }
        -:  715:    else
        -:  716:    {
        -:  717:      //trash 2 cards in hand
    #####:  718:      drawCard(currentPlayer, state);
call    0 never executed
    #####:  719:      drawCard(currentPlayer, state);
call    0 never executed
        -:  720:    }
        -:  721:			
        -:  722:    //discard card from hand
    #####:  723:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  724:    return 0;
        -:  725:}
        -:  726:
function remodelCard called 0 returned 0% blocks executed 0%
    #####:  727:int remodelCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos, int i, int j)
        -:  728:{
    #####:  729:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  730:
    #####:  731:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  732:  {
    #####:  733:    return -1;
        -:  734:  }
        -:  735:
    #####:  736:  gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  737:
        -:  738:  //discard card from hand
    #####:  739:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  740:
        -:  741:  //discard trashed card
    #####:  742:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  743:  {
    #####:  744:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  745:    {
    #####:  746:      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  747:      break;
        -:  748:    }
        -:  749:  }
        -:  750:
    #####:  751:  return 0;
        -:  752:}
        -:  753:
function cardEffect called 8 returned 100% blocks executed 6%
        8:  754:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  755:{
        -:  756:  int i;
        -:  757:  int j;
        -:  758:  int k;
        -:  759:  int x;
        -:  760:  int index;
        8:  761:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        8:  762:  int nextPlayer = currentPlayer + 1;
        -:  763:
        8:  764:  int tributeRevealedCards[2] = {-1, -1};
        -:  765:  int temphand[MAX_HAND];// moved above the if statement
        8:  766:  int drawntreasure=0;
        -:  767:  int cardDrawn;
        8:  768:  int z = 0;// this is the counter for the temp hand
        8:  769:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  770:    nextPlayer = 0;
        -:  771:  }
        -:  772:  
        -:  773:  //uses switch to select card and perform actions
        8:  774:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 25%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  775:    {
        -:  776:    case adventurer:
        2:  777:      adventurerCard(drawntreasure, state, currentPlayer, temphand, z, cardDrawn);
call    0 returned 100%
        2:  778:      return 0;
        -:  779:    
        -:  780:    case council_room:
        -:  781:      //+4 Cards
    #####:  782:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  783:	{
    #####:  784:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
    #####:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
    #####:  791:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  792:	{
    #####:  793:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  794:	    {
    #####:  795:	      drawCard(i, state);
call    0 never executed
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  801:			
    #####:  802:      return 0;
        -:  803:			
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  808:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  809:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  810:      }
        -:  811:      //Backup hand
        -:  812:
        -:  813:      //Update Coins for Buy
    #####:  814:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  817:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  818:	  if (DEBUG)
        -:  819:	    printf("None of that card left, sorry!\n");
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  823:	  }
        -:  824:	}
    #####:  825:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:	  }
        -:  831:	}
        -:  832:	else{
        -:  833:
        -:  834:	  if (DEBUG){
        -:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  836:	  }
        -:  837:
    #####:  838:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  839:	  x = 0;//No more buying cards
        -:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
        -:  844:
        -:  845:	}
        -:  846:      }     
        -:  847:
        -:  848:      //Reset Hand
    #####:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  850:	state->hand[currentPlayer][i] = temphand[i];
    #####:  851:	temphand[i] = -1;
        -:  852:      }
        -:  853:      //Reset Hand
        -:  854:      			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:			
        -:  860:    case mine:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:		
    #####:  868:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  882:
        -:  883:      //discard trashed card
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  887:	    {
    #####:  888:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  889:	      break;
        -:  890:	    }
        -:  891:	}
        -:  892:			
    #####:  893:      return 0;
        -:  894:			
        -:  895:    case remodel:
    #####:  896:      remodelCard(currentPlayer, state, choice1, choice2, handPos, i, j);
call    0 never executed
    #####:  897:      return 0;
        -:  898:    
        -:  899:    case smithy:
        2:  900:      smithyCard(currentPlayer, state, handPos);
call    0 returned 100%
        2:  901:      return 0;
        -:  902:      	
        -:  903:    case village:
    #####:  904:      villageCard(currentPlayer, state, handPos);
call    0 never executed
    #####:  905:      return 0;
        -:  906:    
        -:  907:    case baron:
    #####:  908:      state->numBuys++;//Increase buys by 1!
    #####:  909:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  910:	int p = 0;//Iterator for hand!
    #####:  911:	int card_not_discarded = 1;//Flag for discard set!
    #####:  912:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  913:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  914:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  915:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  916:	    state->discardCount[currentPlayer]++;
    #####:  917:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  918:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  919:	    }
    #####:  920:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  921:	    state->handCount[currentPlayer]--;
    #####:  922:	    card_not_discarded = 0;//Exit the loop
        -:  923:	  }
    #####:  924:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  925:	    if(DEBUG) {
        -:  926:	      printf("No estate cards in your hand, invalid choice\n");
        -:  927:	      printf("Must gain an estate if there are any\n");
        -:  928:	    }
    #####:  929:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  930:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  931:	      state->supplyCount[estate]--;//Decrement estates
    #####:  932:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  933:		isGameOver(state);
call    0 never executed
        -:  934:	      }
        -:  935:	    }
    #####:  936:	    card_not_discarded = 0;//Exit the loop
        -:  937:	  }
        -:  938:			    
        -:  939:	  else{
    #####:  940:	    p++;//Next card
        -:  941:	  }
        -:  942:	}
        -:  943:      }
        -:  944:			    
        -:  945:      else{
    #####:  946:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  948:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  949:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  950:	    isGameOver(state);
call    0 never executed
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:	    
        -:  955:      
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case great_hall:
        -:  959:      //+1 Card
        2:  960:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  961:			
        -:  962:      //+1 Actions
        2:  963:      state->numActions++;
        -:  964:			
        -:  965:      //discard card from hand
        2:  966:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  967:      return 0;
        -:  968:		
        -:  969:    case minion:
        -:  970:      //+1 action
    #####:  971:      state->numActions++;
        -:  972:			
        -:  973:      //discard card from hand
    #####:  974:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  975:			
    #####:  976:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  977:	{
    #####:  978:	  state->coins = state->coins + 2;
        -:  979:	}
        -:  980:			
    #####:  981:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  982:	{
        -:  983:	  //discard hand
    #####:  984:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  985:	    {
    #####:  986:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  987:	    }
        -:  988:				
        -:  989:	  //draw 4
    #####:  990:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	    {
    #####:  992:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  993:	    }
        -:  994:				
        -:  995:	  //other players discard hand and redraw if hand size > 4
    #####:  996:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  997:	    {
    #####:  998:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  999:		{
    #####: 1000:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1001:		    {
        -: 1002:		      //discard hand
    #####: 1003:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1004:			{
    #####: 1005:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1006:			}
        -: 1007:							
        -: 1008:		      //draw 4
    #####: 1009:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1010:			{
    #####: 1011:			  drawCard(i, state);
call    0 never executed
        -: 1012:			}
        -: 1013:		    }
        -: 1014:		}
        -: 1015:	    }
        -: 1016:				
        -: 1017:	}
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case steward:
    #####: 1021:      stewardCard(currentPlayer, state, choice1, choice2, choice3, handPos);
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:    
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1026:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	  state->deckCount[nextPlayer]--;
        -: 1029:	}
    #####: 1030:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:	  state->discardCount[nextPlayer]--;
        -: 1033:	}
        -: 1034:	else{
        -: 1035:	  //No Card to Reveal
        -: 1036:	  if (DEBUG){
        -: 1037:	    printf("No cards to reveal\n");
        -: 1038:	  }
        -: 1039:	}
        -: 1040:      }
        -: 1041:	    
        -: 1042:      else{
    #####: 1043:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1044:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1045:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:	    state->deckCount[nextPlayer]++;
    #####: 1047:	    state->discard[nextPlayer][i] = -1;
    #####: 1048:	    state->discardCount[nextPlayer]--;
        -: 1049:	  }
        -: 1050:			    
    #####: 1051:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1052:	} 
    #####: 1053:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:	state->deckCount[nextPlayer]--;
    #####: 1056:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:	state->deckCount[nextPlayer]--;
        -: 1059:      }    
        -: 1060:		       
    #####: 1061:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1062:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:	state->playedCardCount++;
    #####: 1064:	tributeRevealedCards[1] = -1;
        -: 1065:      }
        -: 1066:
    #####: 1067:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1068:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1069:	  state->coins += 2;
        -: 1070:	}
        -: 1071:		    
    #####: 1072:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1073:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1074:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1075:	}
        -: 1076:	else{//Action Card
    #####: 1077:	  state->numActions = state->numActions + 2;
        -: 1078:	}
        -: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
    #####: 1091:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1099:	    {
    #####: 1100:	      j++;
        -: 1101:	    }
        -: 1102:	}
    #####: 1103:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  return -1;				
        -: 1106:	}
        -: 1107:
        -: 1108:      if (DEBUG) 
        -: 1109:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:      //increase supply count for choosen card by amount being discarded
    #####: 1112:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:			
        -: 1114:      //each other player gains a copy of revealed card
    #####: 1115:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1116:	{
    #####: 1117:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1118:	    {
    #####: 1119:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1120:	    }
        -: 1121:	}
        -: 1122:
        -: 1123:      //discard played card from hand
    #####: 1124:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1125:
        -: 1126:      //trash copies of cards returned to supply
    #####: 1127:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1128:	{
    #####: 1129:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	    {
    #####: 1131:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1132:		{
    #####: 1133:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1134:		  break;
        -: 1135:		}
        -: 1136:	    }
        -: 1137:	}			
        -: 1138:
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
    #####: 1143:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1147:	    {
    #####: 1148:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1149:		{
    #####: 1150:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1151:		    {
    #####: 1152:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1153:		      break;
        -: 1154:		    }
    #####: 1155:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1158:			{
        -: 1159:			  if (DEBUG)
        -: 1160:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1161:			}	
    #####: 1162:		      break;
        -: 1163:		    }		
        -: 1164:		}
        -: 1165:					
        -: 1166:	    }
        -: 1167:				
        -: 1168:	}				
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1172:
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
        2: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
        2: 1198:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
        -: 1207:	  //gain coins equal to trashed card
    #####: 1208:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1209:	  //trash card
    #####: 1210:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1211:	}
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1219:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1220:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:	  state->discardCount[i]++;
    #####: 1222:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1223:	}
        -: 1224:      }
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
    #####: 1232:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1233:	    {
    #####: 1234:	      index = i;
    #####: 1235:	      break;
        -: 1236:	    }
        -: 1237:	}
    #####: 1238:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
        -: 1240:	  //trash both treasure cards
    #####: 1241:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1242:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1243:
        -: 1244:	  //gain 4 Gold cards
    #####: 1245:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:	    {
    #####: 1247:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1248:	    }
        -: 1249:				
        -: 1250:	  //return success
    #####: 1251:	  return 1;
        -: 1252:	}
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
        -: 1256:    }
        -: 1257:	
    #####: 1258:  return -1;
        -: 1259:}
        -: 1260:
function discardCard called 6 returned 100% blocks executed 89%
        6: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
        6: 1265:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1266:    {
        -: 1267:      //add card to played pile
        6: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1269:      state->playedCardCount++;
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
        6: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
        6: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
        1: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        5: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
        5: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
        5: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
        5: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
        6: 1296:  return 0;
        -: 1297:}
        -: 1298:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1304:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
    #####: 1314:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
        -: 1318:    }
    #####: 1319:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
    #####: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
    #####: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
    #####: 1333:  return 0;
        -: 1334:}
        -: 1335:
function updateCoins called 5 returned 100% blocks executed 82%
        5: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
        5: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
       30: 1344:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1345:    {
       25: 1346:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1347:	{
       20: 1348:	  state->coins += 1;
        -: 1349:	}
        5: 1350:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1351:	{
    #####: 1352:	  state->coins += 2;
        -: 1353:	}
        5: 1354:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:	{
    #####: 1356:	  state->coins += 3;
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
        5: 1361:  state->coins += bonus;
        -: 1362:
        5: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
