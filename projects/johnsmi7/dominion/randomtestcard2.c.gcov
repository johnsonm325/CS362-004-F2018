        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***********************************************
        -:    2: * Michael Johnson
        -:    3: * Assignment 3
        -:    4: * CS362 - Fall 2018
        -:    5: * ********************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <stdlib.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
        -:   15:int k[10];
        -:   16:
        -:   17:void randomize(int*, int, int, int);
        -:   18:void randomGameInitialize(int, struct gameState*);
        -:   19:void randomGameState(struct gameState*);
        -:   20:
function randomize called 92 returned 100% blocks executed 100%
       92:   21:void randomize(int *array, int arrSize, int top, int bottom)
        -:   22:{
       92:   23:  int i = 0;
        -:   24:  int x;
     1446:   25:  while(i<arrSize){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
     1262:   26:    int r = (rand() % (top - bottom + 1)) + bottom;
call    0 returned 100%
        -:   27:
     6327:   28:    for (x = 0; x < i; x++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:   29:    {
     5407:   30:      if(array[x] == r){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
      342:   31:        break;
        -:   32:      }
        -:   33:    }
     1262:   34:    if(x == i){
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
      920:   35:      array[i++] = r;
        -:   36:    }
        -:   37:  }
       92:   38:}
        -:   39:
function randomGameInitialize called 50 returned 100% blocks executed 100%
       50:   40:void randomGameInitialize(int seed, struct gameState *G)
        -:   41:{
       50:   42:  int upper = 26,
       50:   43:      lower = 7,
        -:   44:      numPlayers;
        -:   45:  
        -:   46:  do
        -:   47:  {
       92:   48:    randomize(k, 10, upper, lower);
call    0 returned 100%
      254:   49:  }while(k[0] == 16 || k[1] == 16 || k[2] == 16 || k[3] == 16 || k[4] == 16 ||
branch  0 taken 4%
branch  1 taken 96% (fallthrough)
branch  2 taken 7%
branch  3 taken 93% (fallthrough)
branch  4 taken 5%
branch  5 taken 95% (fallthrough)
branch  6 taken 5%
branch  7 taken 95% (fallthrough)
branch  8 taken 8%
branch  9 taken 92% (fallthrough)
      230:   50:         k[5] == 16 || k[6] == 16 || k[7] == 16 || k[8] == 16 || k[9] == 16);
branch  0 taken 2%
branch  1 taken 98% (fallthrough)
branch  2 taken 6%
branch  3 taken 94% (fallthrough)
branch  4 taken 6%
branch  5 taken 94% (fallthrough)
branch  6 taken 10%
branch  7 taken 90% (fallthrough)
branch  8 taken 4%
branch  9 taken 96% (fallthrough)
       50:   51:  k[0] = great_hall;
        -:   52:
       50:   53:  numPlayers = (rand() % (4 - 2 + 1)) + 2;
call    0 returned 100%
        -:   54:
       50:   55:  initializeGame(numPlayers, k, seed, G);
call    0 returned 100%
       50:   56:}
        -:   57:
function randomGameState called 50 returned 100% blocks executed 100%
       50:   58:void randomGameState(struct gameState *G)
        -:   59:{
        -:   60:  int i,
        -:   61:      j,
       50:   62:      countUpper = 15,
       50:   63:      countLower = 0,
        -:   64:      tableCards[16],
        -:   65:      card,
        -:   66:      greatHallCounter;
        -:   67:
      550:   68:  for(i = 7; i < 17; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   69:  {
      500:   70:    tableCards[i] = k[i-7];
        -:   71:  }
        -:   72:
      400:   73:  for(i = 0; i < 7; i++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:   74:  {
      350:   75:    tableCards[i] = i;
        -:   76:  }
        -:   77:
      195:   78:  for(i = 0; i < G->numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:   79:  {
        -:   80:    do
        -:   81:    {
      156:   82:      G->handCount[i] = (rand() % (countUpper - countLower + 1)) + countLower;
call    0 returned 100%
      156:   83:      G->deckCount[i] = (rand() % (countUpper - countLower + 1)) + countLower;
call    0 returned 100%
      156:   84:      G->discardCount[i] = (rand() % (countUpper - countLower + 1)) + countLower;
call    0 returned 100%
      156:   85:    }while( ((G->deckCount[i] + G->discardCount[i]) < 1) || G->handCount[i] == 0);
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
branch  2 taken 6%
branch  3 taken 94% (fallthrough)
        -:   86:
        -:   87:    do
        -:   88:    {
      488:   89:      greatHallCounter = 0;
     3169:   90:      for(j = 0; j < G->handCount[i]; j++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -:   91:      {
     2681:   92:        card = (rand() % (countUpper - countLower + 1)) + countLower;
call    0 returned 100%
     2681:   93:        G->hand[i][j] = tableCards[card];
     2681:   94:        if (G->hand[i][j] == great_hall)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:   95:        {
      187:   96:          greatHallCounter++;
        -:   97:        }
        -:   98:      }
      488:   99:    }while(greatHallCounter == 0);
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  100:
     1251:  101:    for(j = 0; j < G->deckCount[i]; j++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  102:    {
     1106:  103:      card = (rand() % (countUpper - countLower + 1)) + countLower;
call    0 returned 100%
     1106:  104:      G->deck[i][j] = tableCards[card];
        -:  105:    }
        -:  106:
     1232:  107:    for(j = 0; j < G->discardCount[i]; j++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  108:    {
     1087:  109:      card = (rand() % (countUpper - countLower + 1)) + countLower;
call    0 returned 100%
     1087:  110:      G->discard[i][j] = tableCards[card];
        -:  111:    }
        -:  112:  }
       50:  113:}
        -:  114:
function main called 1 returned 100% blocks executed 89%
        1:  115:int main()
        -:  116:{
        -:  117:  int i,
        -:  118:      j,
        -:  119:      k,
        -:  120:      returned,
        1:  121:      choice1 = 0,
        1:  122:      choice2 = 0,
        1:  123:      choice3 = 0,
        1:  124:      upper = 26,
        1:  125:      lower = 0,
        1:  126:      seed = 1000,
        -:  127:      handPos;
        1:  128:  srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:  129:
       51:  130:  for(i = 0; i < 50; i ++)
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:  131:  {
       50:  132:    printf("\nTurn #%d\n", (i+1));
call    0 returned 100%
        -:  133:    struct gameState G;
        -:  134:    struct gameState G2;
       50:  135:    randomGameInitialize(seed, &G);
call    0 returned 100%
       50:  136:    randomGameState(&G);
call    0 returned 100%
        -:  137:  
        -:  138:
        -:  139:/************************************************************
        -:  140: * TESTS
        -:  141: * *********************************************************/
      195:  142:    for(j = 0; j < G.numPlayers; j++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  143:    {
      145:  144:      printf("\nPlayer %d\n", (j+1));
call    0 returned 100%
      145:  145:      G.playedCardCount = 0;
      145:  146:      G.numActions = 0;
      145:  147:      G.whoseTurn = j;
        -:  148:      
      145:  149:      choice1 = (rand() % (upper - lower + 1)) + lower;
call    0 returned 100%
      145:  150:      choice2 = (rand() % (upper - lower + 1)) + lower;
call    0 returned 100%
      145:  151:      choice3 = (rand() % (upper - lower + 1)) + lower;
call    0 returned 100%
        -:  152:
      145:  153:      G2 = G;
        -:  154:
      594:  155:      for(k = 0; k < G.handCount[j]; k++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  156:      {
      594:  157:        if(G.hand[j][k] == great_hall)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
        -:  158:	{
      145:  159:          handPos = k;
      145:  160:	  break;
        -:  161:	}
        -:  162:      }
        -:  163:
      145:  164:      returned = cardEffect(great_hall, choice1, choice2, choice3, &G, handPos, NULL);
call    0 returned 100%
        -:  165:
      145:  166:      if(G.handCount[j] == G2.handCount[j])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  167:      {
      145:  168:	printf("Correctly draw 1 card: PASSED\n");
call    0 returned 100%
        -:  169:      }
        -:  170:      else
        -:  171:      {
    #####:  172:        printf("Correctly draw 1 card: FAILED\n");
call    0 never executed
        -:  173:      }
        -:  174:
      145:  175:      if(G.playedCardCount == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  176:      {
      145:  177:        printf("Correctly played card: PASSED\n");
call    0 returned 100%
        -:  178:      }
        -:  179:      else
        -:  180:      {
    #####:  181:        printf("Correctly played card: FAILED\n");
call    0 never executed
        -:  182:      }
        -:  183:
      145:  184:      if(G.playedCards[0] == great_hall)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  185:      {
      145:  186:        printf("Correctly played great hall card: PASSED\n");
call    0 returned 100%
        -:  187:      }
        -:  188:      else
        -:  189:      {
    #####:  190:        printf("Correctly played great hall card: FAILED\n");
call    0 never executed
        -:  191:      }
        -:  192:
      145:  193:      if(G.numActions == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  194:      {
      145:  195:        printf("Correctly increased number of actions: PASSED\n");
call    0 returned 100%
        -:  196:      }
        -:  197:      else
        -:  198:      {
    #####:  199:        printf("Correctly increased number of actions: FAILED\n");
call    0 never executed
        -:  200:      }
        -:  201:    }
        -:  202:  }
        1:  203:  printf("RANDOM TEST - GREAT HALL CARD\n***********************************************************************************************************************************\n");
call    0 returned 100%
        -:  204:}
